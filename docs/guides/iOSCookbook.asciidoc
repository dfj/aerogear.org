---
layout: basic
title: AeroGear iOS API Cookbook
---

== AeroGear iOS API Cookbook

The goal of this guide is to introduce you to the current available link:http://aerogear.org/docs/specs/aerogear-ios/[iOS API] by using code examples to help you get started quickly. In particular we cover the following areas:

- <<pipe,HTTP REST abstraction>> + <<paging,Paging>>
- <<store,Store and DataManager>>
- <<auth,Authentication and User enrollment>>
- <<crypto, Cryptography support>>

== [[pipe]]Pipe and Pipeline

A Pipe object represents a server connection. An object of this class is responsible to communicate with the server in order to perform read/write operations.

A Pipeline object represents a 'collection' of server connections (aka Pipes). It provides a standard way to communicate with the server no matter the data format or transport expected. It contains some simple management APIs to create and remove Pipe objects.

=== Creating a pipeline and a pipe object

To create a pipeline, you need to use the AGPipeline class. Below is an example: 

[source,c]
----
// NSURL object:
NSURL* serverURL = [NSURL URLWithString:@"http://todo-aerogear.rhcloud.com/todo-server/"];

// create the 'todo' pipeline, which points to the baseURL of the REST application
AGPipeline* todo = [AGPipeline pipelineWithBaseURL:serverURL];

// Add a REST pipe for the 'projects' endpoint
id<AGPipe> projects = [todo pipe:^(id<AGPipeConfig> config) {
    [config setName:@"projects"];
     // this is the default, can be emitted
    [config setType:@"REST"];
}];
----

In the example above the 'projects' pipe points to an RESTful endpoint (http://todo-aerogear.rhcloud.com/todo-server/projects). However, technical details like RESTful APIs (e.g. HTTP PUT) are not exposed on the AGPipeline and AGPipe APIs. Below is shown how to get access to an actual pipe, from the AGPipeline object:

[source,c]
----
// get access to the 'projects' pipe
id<AGPipe> projects = [todo pipeWithName:@"projects"];
----

=== Read a specific object

The 'read:id' method allows you to fetch the object previously saved. The <<noteid, id>> of the object is used as the parameter.

[source,c]
----
// read an object with id of 1
[projects read:@"1" success:^(id responseObject) {
    // LOG the JSON response, returned from the server:
    NSLog(@"READ RESPONSE\n%@", [responseObject description]);
} failure:^(NSError *error) {
    // when an error occurs... at least log it to the console..
    NSLog(@"Read: An error occured! \n%@", error);
}];
----

In this case, where we have a RESTful pipe the API issues a HTTP GET request.

=== Read all objects from the server

The 'read' method allows to (currently) read _all_ object from the server, of the underlying AGPipe:

[source,c]
----
[projects read:^(id responseObject) {
    // LOG the JSON response, returned from the server:
    NSLog(@"READ RESPONSE\n%@", [responseObject description]);
} failure:^(NSError *error) {
    // when an error occurs... at least log it to the console..
    NSLog(@"Read: An error occured! \n%@", error);
}];
----

Since we are pointing to a RESTful endpoint, the API issues a HTTP GET request. 

=== Save object 

The AGPipe offers an API to store objects on a _remote_ server resource. *Currently* the objects are _just_ simple map objects. In the future we are looking to support more advanced (complex) frameworks, like Core Data. The 'save' method is described below:

[source,c]
----
// create a dictionary and set some key/value data on it:
NSMutableDictionary* projectEntity = [NSMutableDictionary dictionary];
[projectEntity setValue:@"Hello World" forKey:@"title"];
// add other properties, like style etc ...

// save the 'new' project:
[projects save:projectEntity success:^(id responseObject) {
    // LOG the JSON response, returned from the server:
    NSLog(@"CREATE RESPONSE\n%@", [responseObject description]);
    
    // get the id of the new project, from the JSON response...
    id resourceId = [responseObject valueForKey:@"id"];

    // and update the 'object', so that it knows its ID...
    [projectEntity setValue:[resourceId stringValue] forKey:@"id"];
    
} failure:^(NSError *error) {
    // when an error occurs... at least log it to the console..
    NSLog(@"SAVE: An error occured! \n%@", error);
}];
----

Above the _save_ function stores the given NSDictionary on the server. In this case, where we have a RESTful pipe the API issues a HTTP POST request.

[[noteid]]
NOTE: Upon success, we set the link:http://aerogear.org/docs/specs/aerogear-ios/Protocols/AGPipeConfig.html#//api/name/recordId[recordId] property on the object from the server response. This is a required step cause this property is used by Pipe's <<update, update>> and <<remove, remove>> methods to perform operations on the object. By default, the link:http://aerogear.org/docs/specs/aerogear-ios/Protocols/AGPipe.html[Pipe] is configured to use the name _"id"_, but if your RESTful resource uses a different name, you can easily override it using the link:http://aerogear.org/docs/specs/aerogear-ios/Protocols/AGPipeConfig.html#//api/name/recordId[recordId] configuration option when constructing the link:http://aerogear.org/docs/specs/aerogear-ios/Protocols/AGPipe.html[Pipe].

[[update]]
=== Update object

The 'save' method is also responsible for updating an 'object'. Before performing 'save', ensure that the object you are trying to save, has the <<noteid, recordId>> property set.

[source,c]
----
// change the title of the previous project 'object':
[projectEntity setValue:@"Hello Update World!" forKey:@"title"];

// and now update it on the server
[projects save:projectEntity success:^(id responseObject) {
    // LOG the JSON response, returned from the server:
    NSLog(@"UPDATE RESPONSE\n%@", [responseObject description]);
} failure:^(NSError *error) {
    // when an error occurs... at least log it to the console..
    NSLog(@"UPDATE: An error occured! \n%@", error);
}];
----

In this case, where we have a RESTful pipe the API issues a HTTP PUT request.

[[remove]]
=== Remove object

The AGPipe also contains a 'remove' method to delete the object on the server. As in the case of 'update', ensure that the <<noteid, recordId>> property is set, so that it knows which resource to delete.

[source,c]
----
// Now, just remove the project:
[projects remove:projectEntity success:^(id responseObject) {
    // LOG the JSON response, returned from the server:
    NSLog(@"DELETE RESPONSE\n%@", [responseObject description]);
} failure:^(NSError *error) {
    // when an error occurs... at least log it to the console..
    NSLog(@"DELETE: An error occured! \n%@", error);
}];
----

In this case, where we have a RESTful pipe the API issues a HTTP DELETE request.

== Time out and Cancel pending operations

=== Timeout
During construction of the Pipe object, you can optionally specify a timeout interval (default is 60 secs) for an operation to complete. If the time interval is exceeded with no response from the server, then the _failure_ callback is executed with an error code set to _NSURLErrorTimedOut_.

From the todo example above:

[source,c]
----
id<AGPipe> projects = [todo pipe:^(id<AGPipeConfig> config) {
    ... 
    [config setTimeout:20];  // set the time interval to 20 secs
}];
----

NOTE: If you are running on iOS versions < 6 and a timeout occurs on a pipe's _save_ operation, the error code is set to _NSURLErrorCancelled_.

=== Cancel
At any time after starting your operations, you can call 'cancel' on the Pipe object to cancel all running Pipe operations. Doing so will invoke the pipe's 'failure' block with an error code set to 'NSURLErrorCancelled'. You can then check this code in order to perform your "cancellation" logic.

[source,c]
----
[projects read:^(id responseObject) {
    // LOG the JSON response, returned from the server:
    NSLog(@"READ RESPONSE\n%@", [responseObject description]);
} failure:^(NSError *error) {
    // when an error occurs... at least log it to the console..
    NSLog(@"Read: An error occured! \n%@", error);
}];

 // cancel the request
[projects cancel];
----

== [[paging]]Paging

The library has built-in paging support, enabling the scrolling to either forward or backwards through a result set returned from the server. Paging metadata located in the server response (either in the headers via link:http://tools.ietf.org/html/rfc5988[WebLinking RFC] or custom headers, or in the body) are used to identify the next or the previous result set. For example, the Twitter search paging metadata is located in the link:https://dev.twitter.com/docs/api/1/get/search[body] of the response signifying the next or previous result set. The location of this metadata as well as naming, is fully configurable during the creation of the pipe, thus enabling greater flexibility in supporting several different paging strategies.

Below is an example that goes against the AeroGear Controller Server.

[source,c]
----
NSURL* baseURL = [NSURL URLWithString:@"https://controller-aerogear.rhcloud.com/aerogear-controller-demo"];
AGPipeline* agPipeline = [AGPipeline pipelineWithBaseURL:baseURL];

id<AGPipe> cars = [agPipeline pipe:^(id<AGPipeConfig> config) {
    [config setName:@"cars-custom"];
    
    [config setPageConfig:^(id<AGPageConfig> pageConfig) {
        [pageConfig setNextIdentifier:@"AG-Links-Next"];
        [pageConfig setPreviousIdentifier:@"AG-Links-Previous"];
        [pageConfig setMetadataLocation:@"header"];
    }];
}];
----

Paging configuration parameters are encapsulated in the AGPageConfig object. Similar to the way we set Pipe configuration params by means of a block, paging configuration params are set using [AGPipeConfig setPageConfig:] method passing a block with the desired paging paramaters. Notice that in our example, we explicitely declare the name of the paging identifiers supported by the server, as well as the location of these identifiers in the response. If the metadataLocation is not specified, the library will assume the server is using Web Linking pagination strategy and will default to it. 
 
For cases that a custom pagination strategy is followed in the server application , the library also allows the user to plug in a user-defined one, by the means of the [pageConfig setPageParameterExtractor] configuration setting. If set, the library will follow this strategy, overriding the build-in provided ones. In that case, the metadata location is not required and is ignored if set. The strategy should follow the protocol AGPageParameterExtractor, allowing the library to determine the 'next' and 'previous' parameters.


=== Start Paging

To kick-start pagination, you use the method _readWithParams_ of the underlying AGPipe, passing your desired query parameters to the server. Upon successfully completion, the _pagedResultSet_ (an enchached category of nsarray) will allow you to scroll through the result set.

[source,c]
----
__block NSMutableArray *pagedResultSet;

// fetch the first page
[cars readWithParams:@{@"color" : @"black", @"offset" : @"0", @"limit" : @1} success:^(id responseObject) {
    pagedResultSet = responseObject;

    // do something

} failure:^(NSError *error) {
    //handle error
}];
----

=== Move Forward in the result set

To move forward in the result set, you simple call _next_ on the _pagedResultSet_ :

[source,c]
----
// move to the next page
[pagedResultSet next:^(id responseObject) {
    // do something

} failure:^(NSError *error) {
    // handle error
}];
----

=== Move Backwards in the result set

To move backwards in the result set, you simple call _previous_ on the _pagedResultSet_ :

[source,c]
----
[pagedResultSet previous:^(id responseObject) {
    // do something
    
} failure:^(NSError *error) {
    // handle error
}];
----
[NOTE]
====

.The library uses the 'next' and 'previous' identifiers:
 - to extract the paging information params from the response and
 - filling those paging information params in the subsequent 'next' and 'previous' requests.
 
Failing to provide correct identifiers, means that no paging params would be appended in the request. 

CAUTION: Without valid paging parameters the used service API may simply return the entire data. To ensure the results returned  do 'logical' represent a 'next' and 'previous' page, the user must ensure correct identifiers are set in the Page configuration.
 
Further, moving beyond last or first page is left on the behaviour of the specific server implementation, that is the library will not treat it differently. Some servers can throw an error (like Twitter or AeroGear Controller does) by respondng with an http error response, or simply return an empty list. The user is responsible to cater for exception cases like this.
====
== [[store]]Store and DataManager

A Store represents an abstraction layer for a storage system. Currently implemented storage systems are an link:http://aerogear.org/docs/specs/aerogear-ios/Classes/AGMemoryStorage.html[in-memory], link:http://aerogear.org/docs/specs/aerogear-ios/Classes/AGPropertyListStorage.html[property list] and a link:http://aerogear.org/docs/specs/aerogear-ios/Classes/AGSQLiteStorage.html[SQLite] storage.

A DataManager manages different Store implementations. It is basically a factory that hides the concrete instantiations of a specific Store implementation. The class offers simple APIs to add, remove or get access to a 'data store'.

The code snippets below are part of https://github.com/aerogear/aerogear-ios/tree/master/AeroGear-iOS/AeroGear-iOSTests[aerogear-ios test suite]. You can browse our BDD specifications for further samples. 

NOTE: Right now, there is NO automatic data sync. This is up to the user.

=== Create a datamanager with store object:

After receiving data from the server, your application may want to keep the data around. The AGDataManager API allows you to create AGStore instances. To create a datamanager, you need to use the AGDataManager class. Below is an example: 

[source,c]
----
// create the datamanager
AGDataManager* dm = [AGDataManager manager];
// add a new (default) store object:
id<AGStore> myStore = [dm store:^(id<AGStoreConfig> config) {
    [config setName:@"tasks"];
}];
----

The AGDataManager class offers some simple 'management' APIs to work with containing AGStore objects. The API offers read and write functionality. The default implementation represents an "in-memory" store. If you want to create a AGPropertyListStorage or a AGSQLiteStorage, add a config type as shown below:

[source,c]
----
// create the datamanager
AGDataManager* dm = [AGDataManager manager];
// add a new (default) store object:
id<AGStore> store = [dm store:^(id<AGStoreConfig> config) {
   [config setName:@"tasks"];
   [config setType:@"SQLITE"];
}];
----

Storage can be of type: MEMORY, PLIST or SQLITE. Similar to the pipe API technical details of the underlying system are not exposed.

=== Save data to the Store

When using a pipe to read all entries of a endpoint, you can use the AGStore to save the received objects:

[source,c]
----
id<AGPipe> tasksPipe = [todo get:@"tasks"];

[tasksPipe read:^(id responseObject) {
    // the response object represents an NSArray,
    // containing multile 'Tasks' (as NSDictionary objects)

    // Save the response object to the store
    NSError *error;
    
    if (![myStore save:responseObject error:&error])
        NSLog(@"Save: An error occured during save! \n%@", error);    

} failure:^(NSError *error) {
    // when an error occurs... at least log it to the console..
    NSLog(@"Read: An error occured! \n%@", error);
}];
----

When loading all tasks from the server, the AGStore object is used inside of the _read_ block from the AGPipe object. The returned collection of tasks is stored inside our in-memory store, from where the data can be accessed.

=== Read an object from the Store

[source,c]
----
// read the task with the '0' ID:
id taskObject =  [myStore read:@"0"];
----

The _read_ function accepts the _recordID_ of the object you want to retrieve. If the object does not exist in the store, _nil_ is returned.

If you want to read _all_ the objects contained in the store, simply call the _readAll_ function

[source,c]
----
// read all objects from the store
NSArray *objects = [myStore readAll];
----

=== Remove one object from the Store

The remove function allows you to delete a single entry in the collection, if present:

[source,c]
----
// remove the task with the '0' ID:
NSError *error;

if (![myStore remove:@"0" error:error])
    NSLog(@"Save: An error occured during remove! \n%@", error);    
----

The remove method accepts the _recordID_ of the object you want to remove. If the object does not exist in the store, FALSE is returned.

=== Filter the entire store

Filtering of the data available in the AGStore is also supported, by using the familiar NSPredicate class available in iOS. In the following example, after storing a pair of dictionaries representing user information details in the store (which can be easily come from a response from a server), we simple call the _filter_ method to filter out the desired information:

[source,c]
----
 NSMutableDictionary *user1 = [@{@"id" : @"1",
                                @"name" : @"Robert",
                                @"city" : @"Boston",
                                @"department" : @{@"name" : @"Software", @"address" : @"Cornwell"},
                                @"experience" : @[@{@"language" : @"Java", @"level" : @"advanced"},
                                                  @{@"language" : @"C", @"level" : @"advanced"}]
                              } mutableCopy];

NSMutableDictionary *user2 = [@{@"id" : @"2",
                                @"name" : @"David",
                                @"city" : @"Boston",
                                @"department" : @{@"name" : @"Software", @"address" : @"Cornwell"},
                                @"experience" : @[@{@"language" : @"Java", @"level" : @"intermediate"},
                                                  @{@"language" : @"Python", @"level" : @"intermediate"}]
                              } mutableCopy];

NSMutableDictionary *user3 = [@{@"id" : @"3",
                                @"name" : @"Peter",
                                @"city" : @"Boston",
                                @"department" : @{@"name" : @"Software", @"address" : @"Branton"},
                                @"experience" : @[@{@"language" : @"Java", @"level" : @"advanced"},
                                                  @{@"language" : @"C", @"level" : @"intermediate"}]
                              } mutableCopy];

// save objects
BOOL success = [_memStore save:users error:nil];

if (success) { // if save succeeded, query the data
    NSPredicate *predicate = [NSPredicate
                              predicateWithFormat:@"city = 'Boston' AND department.name = 'Software' \
                              AND SUBQUERY(experience, $x, $x.language = 'Java' AND $x.level = 'advanced').@count > 0" ];

    NSArray *results = [_memStore filter:predicate];

    // The array now contains the dictionaries _user1_ and _user_3, since they both satisfy the query predicate.
    // do something with the 'results'
    // ...
}
----

Using NSPredicate to filter desired data, is a powerful mechanism offered in iOS and we strongly suggest to familiarize yourself with it, if not already. Take a look at Apple's own link:http://tinyurl.com/chmgwv5[documentation] for more information.

=== Reset the entire store

The reset function allows you the erase all data available in the used AGStore object:

[source,c]
----
// clears the entire store
NSError *error;

if (![myStore reset:&error])
    NSLog(@"Reset: An error occured during reset! \n%@", error);    
----

=== PropertyList Storage Specific

A simple _Property list_ storage system is part of the library as well that uses the same 'AGStore' protocol for reading and writing. Depending on the type specified during store configuration, the system will use either link:https://developer.apple.com/library/mac/documentation/cocoa/reference/foundation/Classes/NSPropertyListSerialization_Class/Reference/Reference.html[NSPropertyListSerialization] (type ''_PLIST_'') or link:https://developer.apple.com/library/mac/documentation/Foundation/Reference/NSJSONSerialization_Class/Reference/Reference.html[NSJSONSerialization] (type ''_JSON_'') when exporting data.

NOTE
You must adhere to the rules governing the serialization of data types for each respective plist type.

Here is a quick example, that stores an link:http://en.wikipedia.org/wiki/One-time_password[One Time Password (OTP)] secret in the filesystem so that OTP tokens can be generated later (check AeroGear OTP iOS link:https://github.com/aerogear/aerogear-otp-ios[library] and link:https://github.com/aerogear/aerogear-otp-ios-demo[demo] for more information on OTP).

[source,c]
----
// initalize plist store (if the file does not exist it will be created)
AGDataManager* manager = [AGDataManager manager];
id<AGStore> plistStore = [manager store:^(id<AGStoreConfig> config) {
    [config setName:@"secrets"]; // will be used as the filename for the plist
    [config setType:@"PLIST"];
}];

// the object to save (e.g. a dictionary)
NSDictionary *otp = [NSDictionary dictionaryWithObjectsAndKeys:@"19a01df0281afcdbe", @"otp", @"1", @"id", nil];

// save it
NSError *error;
    
if (![plistStore save:otp error:&error])
    NSLog(@"Save: An error occured during save! \n%@", error);    
----
    
The 'read', 'reset' or 'remove' API behave the same, as on the default ("in memory") store. 

== [[auth]]Authentication and User enrollment

An Authenticator manages different authentication module implementations. It is basically a factory that hides the concrete instantiation of a specific Authentication Module implementation. The class offers simple APIs to add, remove, or get access to a 'authentication module'.

An AuthenticationModule represents an authentication module and provides the authentication and enrollment API. The default implementation uses REST as the auth transport. Similar to the Pipe, technical details of the underlying system are not exposed

=== Creating an authenticator with an authentication module

To create an authenticator, you need to use the AGAuthenticator class. Below is an example: 

[source,c]
----
// create an authenticator object
AGAuthenticator* authenticator = [AGAuthenticator authenticator];

// add a new auth module and the required 'base url':
NSURL* baseURL = [NSURL URLWithString:@"https://todo-aerogear.rhcloud.com/todo-server/"];
id<AGAuthenticationModule> myMod = [authenticator auth:^(id<AGAuthConfig> config) {
    [config setName:@"authMod"];
    [config setBaseURL:baseURL];
}];
----

The AGAuthenticator class offers some simple 'management' APIs to work with containing AGAuthenticationModule objects. The API provides an authentication and enrollment API. The default implementation uses REST as the auth transport. Similar to the pipe API technical details of the underlying system are not exposed.

=== Register a user

The _enroll_ function of the 'AGAuthenticationModule' protocol is used to register new users with the backend:

[source,c]
----
// assemble the dictionary that has all the data for THIS particular user:
NSMutableDictionary* userData = [NSMutableDictionary dictionary];
[userData setValue:@"john" forKey:@"username"];
[userData setValue:@"123" forKey:@"password"];
[userData setValue:@"me@you.com" forKey:@"email"];
[userData setValue:@"21sda812sad24" forKey:@"betaAccountToken"];

// register a new user
[myMod enroll:userData success:^(id data) {
    // after a successful _registration_, we can work
    // with the returned data...
    NSLog(@"We got: %@", data);
} failure:^(NSError *error) {
    // when an error occurs... at least log it to the console..
    NSLog(@"SAVE: An error occured! \n%@", error);
}];
----

The _enroll_ function submits a generic map object with contains all the information about the new user, that the server endpoint requires. The default (REST) auth module issues for the above a request against _https://todo-aerogear.rhcloud.com/todo-server/auth/enroll_. Besides the NSDictionary the function accepts two simple blocks that are invoked on success or in case of a failure.

=== Login 

Once you have a _valid_ user you can use that information to issue a login against the server, to start accessing protected endpoints:

[source,c]
----
NSDictionary *credentials = @{@"username": @"john", @"password": @"123"};
// issuing a login
[myMod login:credentials success:^(id object) {
    // after a successful _login_, we can work
    // with the returned data...
} failure:^(NSError *error) {
    // when an error occurs... at least log it to the console..
    NSLog(@"SAVE: An error occured! \n%@", error);
}];
----

The default (REST) auth module issues for the above a request against _https://todo-aerogear.rhcloud.com/todo-server/auth/login_. Besides the _username_ and the _password_ (stored in a _NSDictionary_), the function accepts two simple blocks that are invoked on success or in case of a failure.

=== Pass the auth module to a pipe

After running a successful login, you can start using the _AGAuthenticationModule_ object on a _AGPipe_ object to access protected endpoints:

[source,c]
----
id<AGPipe> tasks = [pipeline pipe:^(id<AGPipeConfig> config) {
    [config setName:@"tasks"];
    [config setBaseURL:serverURL];
    [config setAuthModule:myMod];
}];

[tasks read:^(id responseObject) {
    // LOG the JSON response, returned from the server:
    NSLog(@"READ RESPONSE\n%@", [responseObject description]);
} failure:^(NSError *error) {
    // when an error occurs... at least log it to the console..
    NSLog(@"Read: An error occured! \n%@", error);
}];
----

When creating a pipe you need to use the _authModule_ argument in order to pass in an _AGAuthenticationModule_ object.

=== Logout

The logout from the server can be archived by using the _logout_ function:

[source,c]
----
// logout:
[myMod logout:^{
    // after a successful _logout_, when can notify the application
} failure:^(NSError *error) {
    // when an error occurs... at least log it to the console..
    NSLog(@"SAVE: An error occured! \n%@", error);
}];
----

The default (REST) auth module issues for the above a request against _https://todo-aerogear.rhcloud.com/todo-server/auth/logout_. The function accepts two simple blocks that are invoked on success or in case of a failure.

=== NSURLCredential support.
As of version 1.1.0 of the library, you can pass directly on the Pipe configuration an link:http://tinyurl.com/neqbum2[NSURLCredential] object. Doing that will give you instant support for the built-in authentication protocols already supported in iOS (such as Basic/Digest). When a request comes in where an authentication challenge is required, the library will pass to the server those credentials. 

To pass the NSURLCredential object, use the _setCredential_ configuration method during construction of the Pipe:

[source,c]
----
id<AGPipe> tasks = [pipeline pipe:^(id<AGPipeConfig> config) {
    [config setName:@"tasks"];
    [config setCredential:[NSURLCredential
                credentialWithUser:@"username" password:@"passwd" persistence:NSURLCredentialPersistenceNone];
}];
----

NOTE: Care should be taken when specifying the persistence type param when constructing the NSURLCredential object. Specifying type other than link:http://tinyurl.com/q28l9hd[NSURLCredentialPersistenceNone], will have the effect of the credentials to be preserved across session and application restarts. In that case, the developer is responsible to clear the cache. See link:http://tinyurl.com/n9amy5q[NSURLCredentialStorage] class reference for more information. 


=== Time out and Cancel pending operations

As with the case of Pipe, configured timeout interval (in the config object) and cancel operation in _AGAuthenticationModule_ is supported too.


== [[crypto]] Cryptography support

Since 1.3.0 release of the library, we've built on the security foundation provided by link:https://github.com/aerogear/aerogear-crypto-ios[aerogear-crypto-ios]
to offer encrypted variants of our existing in-memory and plist based data stores
 (with an sqlite variant coming next release). If you have been using the existing data stores to persist
 your data, you will be happy to know that you can easily switch to an encrypted variant by simple changing the
 type and some small (really!) amount of code to provide the necessary crypto params.
 Let's start with a small primer to symmetric encryption, which is primary cryptography mechanism used
 to encrypt the data stores.

=== Symmetric encryption API

Symmetric encryption (also called private key encryption) is when the same key is used to encrypt and decrypt data. It is best defined with the following concepts:

- *Encryption key* is a block of bytes of a _specific length_. Key can be derived from password using for example, PBKDF2 algorithm. Must be kept secret.
- *IV (Initialization Vector)* is a random value that is used to encrypt data. Encryption algorithms usually work on fixed-size blocks, IV defines the first encrypted block.

You can derive the encryption key using a password or phassphrase and salt with link:http://aerogear.org/docs/specs/aerogear-crypto-ios/Classes/AGPBKDF2.html[AGPBKDF2].
- *Password* is easy to remember and usually defined by user and must be kept secret. A password is not a key.
- *Salt* is a random value that is used together with a password to derive en encryption key. A salt value does not need to be kept secret.

AeroGear-Crypto symmetric encryption is powered by link:http://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Cipher-block_chaining_.28CBC.29[CBC mode]. Build upon link:https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man3/CC_crypto.3cc.html#//apple_ref/doc/man/3cc/CC_crypto[CommomCrypto] and link:https://developer.apple.com/Library/ios/documentation/Security/Reference/SecurityFrameworkReference/_index.html[Security framework], it provides you an easy way to encrypt your sensitive data. No need to be a security expert to use the library. See by yourself.

First of all, to encrypt your data you need an encryption key. Your key can be derived from a PIN, password or passphrase using link:http://aerogear.org/docs/specs/aerogear-crypto-ios/Classes/AGPBKDF2.html[AGPBKDF2]. 

[source,c]
----

    NSData *salt = [AGRandomGenerator randomBytes];
    NSData *encryptionKey = [pbkdf2 deriveKey:@"password4me" salt:salt];


----

For random generation of key, salt or IV, use link:http://aerogear.org/docs/specs/aerogear-crypto-ios/Classes/AGRandomGenerator.html[AGRandomGenerator]. By default, AGRandomGenerator generates 16 bytes key, but you can also specify the length if you wish.

Once you've got your encryption key, use link:http://aerogear.org/docs/specs/aerogear-crypto-ios/Classes/AGCryptoBox.html[AGCryptoBox] to do the actual encryption. Its interface is simple:

[source,c]
----

@interface AGCryptoBox : NSObject
- (id)initWithKey:(NSData*)key;
- (NSData*)encrypt:(NSData*)data IV:(NSData*)IV;
- (NSData*)decrypt:(NSData*)data IV:(NSData*)IV;
@end


----

With link:http://aerogear.org/docs/specs/aerogear-crypto-ios/Classes/AGCryptoBox.html[AGCryptoBox], you can encrypt/decrypt data using your encryption key and a randomly generated IV (Initialization Vector) as shown below:

[source,c]
----

    NSString* stringToEncrypt = @"I want to keep it secret";
    // encode string into data
    NSData* dataToEncrypt = [stringToEncrypt dataUsingEncoding:NSUTF8StringEncoding];
    NSData* IV = [AGRandomGenerator randomBytes:16];
    
    // encrypt
    NSData* encryptedData = [cryptoBox encrypt:dataToEncrypt IV:IV];
                
    // decrypt
    NSData* decryptedData = [cryptoBox decrypt:encryptedData IV:IV];


----

NOTE: To be able to decrypt, you need the randomly generated IV and you can regenerate the key with the salt and the password (prompted on the fly).
It is not recommended to store either password or derived key. Salt and IV are not sensitive data and can be stored.

=== Encrypted storage

If your storage information need to be encrypted, AeroGear provides convenient and transparent encrypted storage support. You can use encrypted stores with the same API than plain stores. 

Current available implementations are:

1. link:http://aerogear.org/docs/specs/aerogear-ios/Classes/AGMemoryStorage.html[encrypted memory store] which allows you to work in-memory with sensitive data
2. and link:http://aerogear.org/docs/specs/aerogear-ios/Classes/AGPropertyListStorage.html[encrypted property list] storage implementation for a permanent storage.

link:http://aerogear.org/docs/specs/aerogear-ios/Classes/AGSQLiteStorage.html[Encrypted SQLite] will come in next release.

You can initialize an encrypted store with an _salt_ and a _passphrase_.

[source,c]
----

    // create the datamanager
    AGDataManager *manager = [AGDataManager manager];

    // randomly generate salt
    NSData *salt = [AGRandomGenerator randomBytes];

    // crypto config
    AGPassphraseCryptoConfig *config = [[AGPassphraseCryptoConfig alloc] init];
    [config setSalt:salt];
    [config setPassphrase:@"secret_entered_by_user"];

    // initialize the encryption service passing the crypto config
    id<AGEncryptionService> encService = [[AGKeyManager manager] keyService:config];

    // create Encrypted Store (using property list impl)
    store = [manager store:^(id<AGStoreConfig> config) {
        [config setName:@"MyPasswordApp"];
        [config setType:@"ENCRYPTED_PLIST"];
        [config setEncryptionService:encService];
    }];


----

To create a DataManager with encrypted permanent storage, you simply have to specify in the config the type *ENCRYPTED_PLIST*,
and here you go: you've got your property list encrypted storage available!

Reading and saving operations are done like all the other stores.

=== AeroGear Crypto Password

If you want to see it all together, give a try to link:https://github.com/aerogear/aerogear-crypto-ios-demo[AeroGear Crypto Password] app.
This application shows you how using encrypted storage you can store in a central point all your passwords.


