---
layout: core
title: Android Pipes 101
---

== AeroGear Pipes on Android

AeroGear uses a link:/docs/specs/aerogear-android/org/jboss/aerogear/android/pipeline/Pipe.html[*Pipe*] to a remote
web service.  All methods on link:/docs/specs/aerogear-android/org/jboss/aerogear/android/pipeline/Pipe.html[*Pipe*]
consume a link:/docs/specs/aerogear-android/org/jboss/aerogear/android/Callback.html[*CallBack*].
If you are calling your link:/docs/specs/aerogear-android/org/jboss/aerogear/android/pipeline/Pipe.html[*Pipe*]
from an Activity or Fragment it is highly encouraged to create a static class which extends
link:/docs/specs/aerogear-android/org/jboss/aerogear/android/pipeline/AbstractActivityCallback.html[*AbstractActivityCallback*], link:/docs/specs/aerogear-android/org/jboss/aerogear/android/pipeline/support/AbstractFragmentActivityCallback.html[*AbstractFragmentActivityCallback*], link:/docs/specs/aerogear-android/org/jboss/aerogear/android/pipeline/AbstractFragmentCallback.html[*AbstractFragmentCallback*], or link:/docs/specs/aerogear-android/org/jboss/aerogear/android/pipeline/support/AbstractSupportFragmentCallback.html[*AbstractSupportFragmentCallback*].

Let's say you have a simple webservice at *http://www.server.com/car*.

[source,java]
----
public class Car {

    @RecordId
    public Long id;
    public String make;
    public String model;
    
    public String toString() {
      return String.format("{make:%s, model:%s}", make, model);
    }
}
----

The easiest way to connect to this service with AeroGear would be

[source,java]
----
Pipe<Car> pipe = new RestAdapter<Car>(Car.class, new URL("http://www.server.com/car"));
----

And `pipe.read`, `pipe.save`, and `pipe.remove` would all work as advertised with no extra work.  

However, if we are calling this code from an Android Activity or Fragment, then we need to be aware of the link:http://developer.android.com/training/basics/activity-lifecycle/index.html[Android Activity lifecycle].  If the Application goes into the background (ex. the user gets a phone call), then any results which come in may be lost or cause an Exception if they interact with the UI of the suspended Activity.  If there is a configuration change (ex. the phone was rotated) then the Activity is destroyed and a new one is created.  If you used an anonymous inner class for your link:/docs/specs/aerogear-android/org/jboss/aerogear/android/Callback.html[*CallBack*] instance then you will lose your results when the operation completes (because anonymous inner classes have an implicit reference to the outer class).

However, AeroGear also has support for link:http://developer.android.com/guide/components/loaders.html[Android's Loader API]. Â Loader's were introduced by Android in version 3.0, and their lifecycle is managed by Android.  When an Activity is paused and resumed, any activity the Loader was working on is returned.  If the Activity is destroyed because of a configuration change then the Loader will provide its results to the new Activity instance without having to make second call to a remote server.

This code uses the link:/docs/specs/aerogear-android/org/jboss/aerogear/android/Pipeline.html[*Pipeline*] class to instantiate and manage a link:/docs/specs/aerogear-android/org/jboss/aerogear/android/pipeline/Pipe.html[*Pipe*] object.  `Pipeline.pipe` creates and returns an instance of link:/docs/specs/aerogear-android/org/jboss/aerogear/android/pipeline/Pipe.html[*Pipe*].  You don't have to keep a reference to the result.  `Pipeline.get(String, Activity)` will return a instance of link:/docs/specs/aerogear-android/org/jboss/aerogear/android/pipeline/LoaderPipe.html[*LoaderPipe*] which is really a wrapper around the original link:/docs/specs/aerogear-android/org/jboss/aerogear/android/pipeline/Pipe.html[*Pipe*] object.  There are also `Pipeline.get` methods for Fragments and the FragmentActivity and Fragment classes Android's support library.

[source,java]
----
public class MyActivity extends ListActivity {

  Pipeline pipeline;

  void onCreate() {
      pipeline = new Pipeline("http://www.server.com");
      pipeline.pipe(Car.class);
  }

  void onStart() {

     /*
     By default, Pipeline.pipe stores the Pipe created by Pipeline.pipe
     using a key which is the lowercase of the class the Pipe is marshaling.
     */
     LoaderPipe<Car> pipe = pipeline.get("car", this);
     pipe.read(new MyCallback());
  }
  
  private static class MyCallback extends AbstractActivityCallback<List<Car>> {
  
  /*
  * AbstractActivity's constructor consumes a varargs of Objects which it uses
  * to generate the value returned by hashCode();
  */
  public MyCallback() {
   super("myCallback");
  }
  
  void onSuccess(List<Car> data) {
    ListActivity activity = (ListActivity) getActivity();
    activity.setListAdapter(new ArrayAdapter(activity, android.R.simple_list_item_1, data));
  }
  
  void onFailure(Exception e){
   //Gracefully handle the exception
  }
  
  }

}
----

Now the pipe instance will be respectful of the Android lifecycle and calls to its methods will be handled by and behave like Loaders.  For instance, if the device is rotated the result of the read will be returned from a local cache instead of  being fetched from the web again.  If you want to force a read, just call pipe.reset() before your read.

`Pipeline.get` also works on *android.app.Fragment*, *android.support.v4.app.Fragment*, and *FragmentActivity*.

Often a webservice will not quite match up to the default patterns supported by AeroGear.  For instance, the data may not be root element of a JSON response, the data source may require authentication, you may need to specify a specific endpoint, etc.  For these instances we use the *PipeConfig* object.

[source,java]
----
public class MyActivity extends ListActivity {

  Pipeline pipeline;

  void onCreate() {

     PipeConfig pipeConfig = new PipeConfig(new URL("http://www.server.com"), Car.class);
     pipeConfig.setEndpoint("cars.json");

     pipeline = new Pipeline("http://www.server.com");

     pipeline.pipe(Car.class, pipeConfig);
  }

  void onStart() {

     /*
     By default, Pipeline.pipe stores the Pipe created by Pipeline.pipe
     using a key which is the lowercase of the class the Pipe is marshaling.
     */
     LoaderPipe<Car> pipe = pipeline.get("car", this);
     pipe.read(new MyCallback());//Will make a call to http://www.server.com/car.json
  }
}
----

The full set of options you can configure on *PipeConfig* are on the link:/docs/specs/aerogear-android/org/jboss/aerogear/android/impl/pipeline/PipeConfig.html[*javadoc*] page.